package com.chadbutz.pai.main;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.chadbutz.pai.model.Conversation;
import com.chadbutz.pai.repository.ConversationRepository;

import ai.api.AIConfiguration;
import ai.api.AIDataService;
import ai.api.AIServiceException;
import ai.api.model.AIRequest;
import ai.api.model.AIResponse;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
@EnableJpaRepositories(basePackageClasses = ConversationRepository.class)
public class MainController {
	// This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ConversationRepository conversationRepository;
    AIConfiguration configuration = new AIConfiguration("459a0a3a3e71409f942cede9c60651f9");

    AIDataService dataService = new AIDataService(configuration);
	MainController() {
		
	}
	
	@Autowired
	MainController(ConversationRepository conversationRepository) {
		this.conversationRepository = conversationRepository;
	}

	@RequestMapping(method = RequestMethod.GET,path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewConversation (@RequestParam String dialogue) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		String response = "";
		String data = "";
		String action = "";
		
		AIRequest request = new AIRequest(dialogue);
		AIResponse resp = null;
		
		try {
			resp = dataService.request(request);

			if (resp.getStatus().getCode() == 200) {
			  response = resp.getResult().getFulfillment().getSpeech();
			  data = resp.getResult().toString();
			  action = resp.getResult().getAction();
		        
			  Conversation n = new Conversation(dialogue, response, data, action);
			  conversationRepository.save(n);
			} else {
				response = resp.getStatus().getErrorDetails();
			}
	
		} catch (AIServiceException e) {
			response = e.getMessage();
		}
		return response;
	}

	@RequestMapping(method = RequestMethod.GET,path="/all")
	public @ResponseBody Iterable<Conversation> getAllConversations() {
		// This returns a JSON or XML with the users
		return conversationRepository.findAll();
	}

}
